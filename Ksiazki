data class Book(val title: String, val author: String, val year: Int)

class BookManager {
    private val books = mutableListOf<Book>()

    fun addBook(book: Book) {
        books.add(book)
        println("Dodano książkę: '${book.title}'")
    }

    fun displayBooks() {
        if (books.isEmpty()) println("Brak książek.") 
        else books.forEach { println("${it.title} - ${it.author} (${it.year})") }
    }

    fun filterBooksByAuthor(author: String) {
        val filtered = books.filter { it.author.equals(author, ignoreCase = true) }
        if (filtered.isEmpty()) println("Brak książek autora '$author'.")
        else filtered.forEach { println(it.title) }
    }

    fun filterBooksByYear(year: Int) {
        val filtered = books.filter { it.year == year }
        if (filtered.isEmpty()) println("Brak książek z roku $year.")
        else filtered.forEach { println(it.title) }
    }

    fun sortBooksByTitle() {
        books.sortedBy { it.title }.forEach { println(it.title) }
    }
}

fun main() {
    val manager = BookManager()

    while (true) {
        println(
            """
            Menu:
            1. Dodaj książkę
            2. Wyświetl książki
            3. Filtruj książki po autorze
            4. Filtruj książki po roku
            5. Sortuj książki
            0. Zakończ
            Wybierz opcję: 
            """.trimIndent()
        )
        when (readLine()?.toIntOrNull()) {
            1 -> {
                print("Tytuł: "); val title = readLine().orEmpty()
                print("Autor: "); val author = readLine().orEmpty()
                print("Rok: "); val year = readLine()?.toIntOrNull() ?: 0
                manager.addBook(Book(title, author, year))
            }
            2 -> manager.displayBooks()
            3 -> {
                print("Autor: "); val author = readLine().orEmpty()
                manager.filterBooksByAuthor(author)
            }
            4 -> {
                print("Rok: "); val year = readLine()?.toIntOrNull() ?: 0
                manager.filterBooksByYear(year)
            }
            5 -> manager.sortBooksByTitle()
            0 -> {
                println("Zakończono program."); break
            }
            else -> println("Niepoprawna opcja, spróbuj ponownie.")
        }
    }
}
